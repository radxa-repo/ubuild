#!/bin/bash

get_soc_family() {
    case "$1" in
        rk*)
            echo rockchip
            ;;
        s905y2|a311d)
            echo amlogic
            ;;
        *)
            error $EXIT_UNSUPPORTED_OPTION "$1"
            ;;
    esac
}

ARCH="arm"
CROSS_COMPILE="aarch64-linux-gnu-"
MAINLINE_UBOOT="https://github.com/u-boot/u-boot.git"
ATF_TAG="v2.6"
RKBIN=
UBOOT_GIT="$MAINLINE_UBOOT"
UBOOT_TAG="v2022.04"
UBOOT_DEFCONFIG=
UBOOT_COMMIT=
UBOOT_BRANCH=
SOC_OVERRIDE=
PKG_REVISION="1"

NO_PREPARE_SOURCE=

EXIT_SUCCESS=0
EXIT_UNKNOWN_OPTION=1
EXIT_TOO_FEW_ARGUMENTS=2
EXIT_UNSUPPORTED_OPTION=3

error() {
    case "$1" in
        $EXIT_SUCCESS)
            ;;
        $EXIT_UNKNOWN_OPTION)
            echo "Unknown option: '$2'." >&2
            ;;
        $EXIT_TOO_FEW_ARGUMENTS)
            echo "Too few arguments." >&2
            ;;
        $EXIT_UNSUPPORTED_OPTION)
            echo "Option '$2' is not supported." >&2
            ;;
        *)
            echo "Unknown exit code." >&2
            ;;
    esac
    
    exit "$1"
}

usage() {
    cat >&2 << EOF
Radxa U-Boot Build Tool
usage: $(basename "$0") [options] <board>

Supported package generation options:
    -r, --revision [num]
                        Specify custom revision number, default=1
    --no-prepare-source Allow building against locally modified repos

Alternative functionalities
    --json [catagory]   Print supported options in json format
                        Available catagories: $(get_supported_infos)
    -h, --help          Show this help message

Supported board:
$(printf_array "    %s\n" "$(get_supported_boards)")
EOF
    exit "$1"
}

printf_array() {
    local FORMAT="$1"
    shift
    local ARRAY=("$@")

    if [[ $FORMAT == "json" ]]
    then
        jq --compact-output --null-input '$ARGS.positional' --args -- "${ARRAY[@]}"
    else
        for i in ${ARRAY[@]}
        do
            printf "$FORMAT" "$i"
        done
    fi
}

get_supported_boards() {
    local BOARDS=()
    for f in $(ls $SCRIPT_DIR/boards)
    do
        BOARDS+="$f "
    done
    echo "${BOARDS[@]}"
}

get_supported_infos() {
    local INFOS=("boards")
    echo "${INFOS[@]}"
}

in_array() {
    local ITEM="$1"
    shift
    local ARRAY=("$@")
    if [[ " ${ARRAY[*]} " =~ " $ITEM " ]]
    then
        true
    else
        false
    fi
}

json() {
    local ARRAY=($(get_supported_infos))
    if ! in_array "$1" "${ARRAY[@]}"
    then
        error $EXIT_UNKNOWN_OPTION "$1"
    fi

    printf_array "json" $(get_supported_$1)
    exit 0
}

git_source() {
    local GIT_URL="$1"
    local GIT_BRANCH="$2"
    local FOLDER="$(basename $GIT_URL)"
    FOLDER="${FOLDER%.*}"

    if [[ -n $GIT_BRANCH ]]
    then
        GIT_BRANCH="--branch $GIT_BRANCH"
    fi

    if ! [[ -e "$SRC_DIR/$FOLDER" ]]
    then
        git clone --depth 1 $GIT_BRANCH "$GIT_URL" "$SRC_DIR/$FOLDER"
    fi
}

prepare_source() {
    local SRC_DIR="$SCRIPT_DIR/.src"
    local UBOOT_DIR="$SRC_DIR/u-boot"
    local BOARD_DIR="$SCRIPT_DIR/boards/$BOARD"

    mkdir -p "$SRC_DIR"
    mkdir -p "$UBOOT_DIR"

    pushd "$UBOOT_DIR"

        git init
        [[ -z $(git config --get user.name) ]] && git config user.name "lbuild"
        [[ -z $(git config --get user.email) ]] && git config user.email "lbuild@invalid.email"
        git am --abort && true

        local ORIGIN=$(sha1sum <(echo "$UBOOT_GIT") | cut -d' ' -f1)
        git remote add $ORIGIN $UBOOT_GIT 2>/dev/null && true

        if [[ -n $UBOOT_COMMIT ]]
        then
            git fetch --depth 1 $ORIGIN $UBOOT_COMMIT
            git checkout $UBOOT_COMMIT
        elif [[ -n $UBOOT_BRANCH ]]
        then
            # Tag is more precise than branch and should be preferred.
            # However, since we are defaulting with upstream U-Boot,
            # we will always have non empty $UBOOT_TAG.
            # As such check $UBOOT_BRANCH first.
            git fetch --depth 1 $ORIGIN $UBOOT_BRANCH
            git checkout $UBOOT_BRANCH
        elif [[ -n $UBOOT_TAG ]]
        then
            git fetch --depth 1 $ORIGIN tag $UBOOT_TAG
            git checkout tags/$UBOOT_TAG
        fi

        git reset --hard FETCH_HEAD
        git clean -ffd

        for f in $(find -L $BOARD_DIR/*.sh -type f)
        do
            if [[ $(type -t custom_source_action) == function ]]
            then
                unset -f custom_source_action
            fi

            source $f

            if [[ $(type -t custom_source_action) == function ]]
            then
                custom_source_action
            fi
        done

        for d in $(find -L $BOARD_DIR -type d | sort)
        do
            if ls $d/*.patch &>/dev/null
            then
                git am --reject --whitespace=fix $(ls $d/*.patch)
            fi
        done

    popd
}

kconfig() {
    while IFS="" read -r k || [ -n "$k" ]
    do
        local CONFIG=
        local OPTION=
        local SWITCH=
        if echo "$k" | grep "^# CONFIG_.* is not set$"
        then
            CONFIG=$(echo $k | cut -d ' ' -f 2)
            SWITCH="--undefine"
        elif echo "$k" | grep "^CONFIG_.*=[ynm]$"
        then
            CONFIG=$(echo $k | cut -d '=' -f 1)
            case "$(echo $k | cut -d'=' -f 2)" in
                y)
                    SWITCH="--enable"
                    ;;
                n)
                    SWITCH="--disable"
                    ;;
                m)
                    SWITCH="--module"
                    ;;
            esac
        elif echo "$k" | grep "^CONFIG_.*=\".*\"$"
        then
            CONFIG="$(echo $k | cut -d '=' -f 1)"
            OPTION="$(echo $k | cut -d '=' -f 2)"
            SWITCH="--set-val"
        elif echo "$k" | grep "^#"
        then
            continue
        elif [[ -z "$k" ]]
        then
            continue
        else
            error $EXIT_UNKNOWN_OPTION "$k"
        fi
        "$SCRIPT_DIR/common/config" --file "$SCRIPT_DIR/.src/u-boot/.config" $SWITCH $CONFIG "$OPTION"
    done < "$1"
}

build() {
    if (( $# == 0 ))
    then
        usage 0
    fi

    while (( $# > 0 ))
    do
        case "$1" in
            -r | --revision)
                PKG_REVISION="$2"
                shift 2
                ;;
            --no-prepare-source)
                NO_PREPARE_SOURCE="y"
                shift
                ;;
            --json)
                json "$2"
                ;;
            -h | --help)
                usage 0
                ;;
            -*)
                error $EXIT_UNKNOWN_OPTION "$1"
                ;;
            *) break ;;
        esac
    done

    if (( $# == 0))
    then
        usage 0
    fi

    BOARD=$1

    if ! source "$SCRIPT_DIR/boards/$1/board.conf" 2>/dev/null
    then
        error $EXIT_UNKNOWN_OPTION "$1"
    fi

    local SOC_FAMILY=$(get_soc_family $SOC)

    if [[ -z $UBOOT_DEFCONFIG ]]
    then
        case "$SOC_FAMILY" in
            rockchip)
                UBOOT_DEFCONFIG=${BOARD}-${SOC}_defconfig
                ;;
            *)
                UBOOT_DEFCONFIG=${BOARD}_defconfig
                ;;
        esac
    fi

    if [[ -z $SOC_OVERRIDE ]]
    then
        local SOC_OVERRIDE=$SOC
    fi

    [[ $NO_PREPARE_SOURCE != "y" ]] && prepare_source

    # Get U-Boot version
    source <(cat $SCRIPT_DIR/.src/u-boot/Makefile | head -n 10 | tr -d ' ')
    UBOOT_VERSION="$VERSION"
    if [[ -n $PATCHLEVEL ]]; then UBOOT_VERSION+=".$PATCHLEVEL"; fi
    if [[ -n $SUBLEVEL ]]; then UBOOT_VERSION+=".$SUBLEVEL"; fi
    if [[ -n $EXTRAVERSION ]]; then UBOOT_VERSION+=".$EXTRAVERSION"; fi

    local UBOOT_OPT=
    case "$SOC_FAMILY" in
        rockchip)
            if [[ $UBOOT_GIT == $MAINLINE_UBOOT ]]
            then
                make -C "$SCRIPT_DIR/.src/arm-trusted-firmware" -j$(nproc) CROSS_COMPILE=$CROSS_COMPILE PLAT=$SOC_OVERRIDE
                UBOOT_OPT="BL31=$SCRIPT_DIR/.src/arm-trusted-firmware/build/$SOC_OVERRIDE/release/bl31/bl31.elf"
            else
                local BL31=$(find $SCRIPT_DIR/.src/rkbin/bin | grep ${SOC_OVERRIDE}_bl31_v | sort | tail -n 1)
                if [[ -z $BL31 ]]
                then
                    echo "Unable to find prebuilt bl31. The resulting bootloader may not work!" >&2
                else
                    echo "Using bl31 $(basename $BL31)"
                    UBOOT_OPT="BL31=$BL31"
                fi
            fi

            UBOOT_OPT="$UBOOT_OPT u-boot.dtb u-boot.itb"
            ;;
    esac

    make -C "$SCRIPT_DIR/.src/u-boot" -j$(nproc) ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE $UBOOT_DEFCONFIG
    
    if [[ -e "$SCRIPT_DIR/boards/$BOARD/kconfig.conf" ]]
    then
        kconfig "$SCRIPT_DIR/boards/$BOARD/kconfig.conf"
    fi

    make -C "$SCRIPT_DIR/.src/u-boot" -j$(nproc) ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE olddefconfig $UBOOT_OPT all

    rm -rf "$SCRIPT_DIR/.root"
    mkdir -p "$SCRIPT_DIR/.root/usr/lib/u-boot-$BOARD"
    cp "$SCRIPT_DIR/common/boot.cmd" "$SCRIPT_DIR/common/setup.sh" "$SCRIPT_DIR/boards/$BOARD/uEnv.txt" "$SCRIPT_DIR/.root/usr/lib/u-boot-$BOARD/"

    case "$SOC_FAMILY" in
        amlogic)
            make -C "$SCRIPT_DIR/.src/fip" -j$(nproc) distclean
            make -C "$SCRIPT_DIR/.src/fip" -j$(nproc) fip BOARD=$BOARD UBOOT_BIN="$SCRIPT_DIR/.src/u-boot/u-boot.bin"

            cp "$SCRIPT_DIR/.src/fip/$BOARD/u-boot.bin" "$SCRIPT_DIR/.src/fip/$BOARD/u-boot.bin.sd.bin" "$SCRIPT_DIR/.root/usr/lib/u-boot-$BOARD/"
            ;;
        rockchip)
            if [[ -n $RKBIN ]]
            then
                local FLASH_DATA="$(find $SCRIPT_DIR/.src/rkbin/bin | grep ${RKBIN} | sort | tail -n 1):"
                if [[ -z $FLASH_DATA ]]
                then
                    error $EXIT_UNKNOWN_OPTION "$RKBIN"
                else
                    echo "Using Rockchip miniloader $(basename $FLASH_DATA)"
                fi
            else
                local FLASH_DATA=
            fi
            $SCRIPT_DIR/.src/u-boot/tools/mkimage -n $SOC_OVERRIDE -T rksd -d "${FLASH_DATA}${SCRIPT_DIR}/.src/u-boot/spl/u-boot-spl.bin" "$SCRIPT_DIR/.src/u-boot/idbloader.img"
            $SCRIPT_DIR/.src/u-boot/tools/mkimage -n $SOC_OVERRIDE -T rkspi -d "${FLASH_DATA}${SCRIPT_DIR}/.src/u-boot/spl/u-boot-spl.bin" "$SCRIPT_DIR/.src/u-boot/idbloader-spi.img"
            cp "$SCRIPT_DIR/.src/u-boot/u-boot.itb" "$SCRIPT_DIR/.src/u-boot/idbloader-spi.img" "$SCRIPT_DIR/.src/u-boot/idbloader.img" "$SCRIPT_DIR/.root/usr/lib/u-boot-$BOARD/"
            ;;
        *)
            error $EXIT_UNSUPPORTED_OPTION "$SOC_FAMILY"
            ;;
    esac

    local NAME="u-boot-$BOARD"
    local VERSION="$UBOOT_VERSION-$PKG_REVISION"
    local URL="https://github.com/radxa-pkg/$NAME"
    local DESCRIPTION="Radxa U-Boot image for $BOARD"
    fpm -s dir -t deb -n "$NAME" -v "$VERSION" \
        --deb-compression xz \
        -a arm64 \
        --depends dthelper \
        --deb-priority optional --category admin \
        --deb-field "Replaces: $NAME" \
        --deb-field "Conflicts: $NAME" \
        --deb-field "Provides: $NAME" \
        --url "$URL" \
        --description "$DESCRIPTION" \
        --license "GPL-2+" \
        -m "Radxa <dev@radxa.com>" \
        --vendor "Radxa" \
        --template-scripts --after-install "$SCRIPT_DIR/deb/postinst.sh" \
        --force \
        "$SCRIPT_DIR/.root/"=/
}

set -e

SCRIPT_DIR="$(dirname "$(realpath "$0")")"

build "$@"